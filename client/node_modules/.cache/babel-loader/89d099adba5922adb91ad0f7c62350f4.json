{"ast":null,"code":"import * as actionTypes from \"./actionTypes\";\n/*this is a new axios instance.  it is not the one\n  from axios-orders.  we are doing this because\n  we don't use the baseURL that is set up in that one\t\n*/\n\nimport axios from \"axios\";\nimport firebase, { authRef, provider } from '../../fire.js';\nexport var authStart = function authStart() {\n  //this is used to change the state to 'loading'\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport var authSuccess = function authSuccess(token) {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    token: token //this will be referred to as action.idToken in the reducer\n    // userId:userId,\n    //this will be referred to as action.userId in the reducer\n\n  };\n};\nexport var authFail = function authFail(error) {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\nexport var logout = function logout() {\n  axios.post(\"/logout\").then(function (res) {\n    console.log(res);\n  }).catch(function (err) {\n    console.log(err);\n  });\n  localStorage.removeItem(\"token\");\n  localStorage.removeItem(\"expirationDate\");\n  localStorage.removeItem(\"userId\");\n  localStorage.removeItem(\"redirectPath\");\n  localStorage.removeItem(\"refreshtPath\");\n  console.log(\"logout\");\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport var checkAuthTimeout = function checkAuthTimeout(expirationTime) {\n  return function (dispatch) {\n    console.log(\"checkAuthTimeout\");\n    setTimeout(function () {\n      dispatch(logout());\n    }, expirationTime * 1000); //the expiration time that is returned from firebase is 3600 seconds\n    //setTimeout expects time in milliseconds.  this turns it into 36000 milliseconds\n    //this will dispatch the logout action in 36000 ms, which is one hour\n  };\n};\nexport var auth = function auth(token) {\n  return function (dispatch) {\n    console.log(\"auth action auth\");\n    console.log(token);\n    localStorage.setItem(\"token\", token);\n    dispatch(authStart());\n    dispatch(authSuccess(token));\n  };\n}; // export const auth = (email, password, isSignup) =>{\n// \t//dispatch is made available by redux-thunk\n// \t//this is the asynchronous code\n// \treturn dispatch =>{\n// \t\t\t//...\n// \t\t\tdispatch(authStart());\n// \t\t\tconst authData = {\n// \t\t\t\temail:email,\n// \t\t\t\tpassword:password,\n// \t\t\t\treturnSecureToken:true\n// \t\t\t}\n// \t\t\t\t//default is the signUp URL\n// \t\t\tlet url = \"https://www.googleapis.com/identitytoolkit/v3/relyingparty/signupNewUser?key=AIzaSyAZJdyt7vrJBbwN_yY4W_nQJCYCTFhqZ4U\";\n// \t\t\tif(!isSignup){\n// \t\t\t\t//this is the verifyPassword URL\n// \t\t\t\turl=\"https://www.googleapis.com/identitytoolkit/v3/relyingparty/verifyPassword?key=AIzaSyAZJdyt7vrJBbwN_yY4W_nQJCYCTFhqZ4U\";\n// \t\t\t}\n// \t\t\taxios.post(url, authData)\n// \t\t\t\t.then(response =>{\n// \t\t\t\t\tconsole.log(response);\n// \t\t\t\t\t\t//getTime() converts the date to milliseconds. Multiplying expiresIn by 1000 also converts that value to milliseconds.  This allows them to be added together.  This will be a value one hour in the future from the time of login\n// \t\t\t\t\tconst expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000);\n// \t\t\t\t\tlocalStorage.setItem(\"token\", response.data.idToken);\n// \t\t\t\t\tlocalStorage.setItem(\"expirationDate\", expirationDate);\n// \t\t\t\t\tlocalStorage.setItem(\"userId\", response.data.localId);\n// \t\t\t\t\tdispatch(authSuccess(response.data.idToken, response.data.localId));\n// \t\t\t\t\tdispatch(checkAuthTimeout(response.data.expiresIn));\n// \t\t\t\t\t//this sets the app to logout after one hour\n// \t\t\t\t})\n// \t\t\t\t.catch(error =>{\n// \t\t\t\t\tconsole.log(error);\n// \t\t\t\t\tdispatch(authFail(error.response.data.error));\n// \t\t\t\t})\n// \t\t\t\t// authRef.signInWithPopup(provider).then(response=>{\n// \t\t\t\t// \tconsole.log(response);\n// \t\t\t\t// }).catch(err=>{\n// \t\t\t\t// \tconsole.log(err);\n// \t\t\t\t// })\n// \t\t}\n// }\n\nexport var setAuthRedirectPath = function setAuthRedirectPath(path) {\n  return {\n    type: actionTypes.SET_AUTH_REDIRECT_PATH,\n    path: path\n  };\n}; // export const setRefreshPath = (path) => {\n// \treturn {\n// \t\ttype:actionTypes.SET_AUTH_REFRESH_PATH,\n// \t\tpath:path\n// \t}\n// }\n\nexport var AuthCheckState = function AuthCheckState() {\n  return function (dispatch) {\n    var token = localStorage.getItem(\"token\");\n\n    if (!token) {\n      dispatch(logout());\n    } else {\n      var userId = localStorage.getItem(\"userId\"); //localStorage.getItem(\"expirationDate\") will return a string. passing it as an argument will return a new Date object\n\n      var expirationDate = new Date(localStorage.getItem(\"expirationDate\"));\n\n      if (expirationDate > new Date()) {\n        //if the expirationDate is greater than the new Date() at the time this code is run,\n        //it means we are logged in\n        console.log(expirationDate.getTime() - new Date().getTime());\n        console.log(\"AuthCheckState if(expdate > new Date)\");\n        dispatch(authSuccess(token, userId));\n        dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n      } else {\n        //if the expirationDate is less than the new Date() at the time this code is run\n        //it means the app should log out as we are only supposed to be logged in for one hour\n        dispatch(logout());\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/Users/qhafeez26/mern-workout/client/src/store/actions/auth-actions.js"],"names":["actionTypes","axios","firebase","authRef","provider","authStart","type","AUTH_START","authSuccess","token","AUTH_SUCCESS","authFail","error","AUTH_FAIL","logout","post","then","res","console","log","catch","err","localStorage","removeItem","AUTH_LOGOUT","checkAuthTimeout","expirationTime","dispatch","setTimeout","auth","setItem","setAuthRedirectPath","path","SET_AUTH_REDIRECT_PATH","AuthCheckState","getItem","userId","expirationDate","Date","getTime"],"mappings":"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","sourcesContent":["import * as actionTypes from \"./actionTypes\";\n\n/*this is a new axios instance.  it is not the one\n  from axios-orders.  we are doing this because\n  we don't use the baseURL that is set up in that one\t\n*/\nimport axios from \"axios\";\nimport firebase, { authRef, provider } from '../../fire.js';\n\n\n\n\nexport const authStart = () =>{\n\t//this is used to change the state to 'loading'\n\treturn {\n\t\ttype:actionTypes.AUTH_START\n\t}\n\n\n}\n\nexport const authSuccess = (token) =>{\n\t\n\n\n\n\treturn {\n\t\ttype:actionTypes.AUTH_SUCCESS,\n\t\ttoken:token,  //this will be referred to as action.idToken in the reducer\n\t\t// userId:userId,\n\t\t\t//this will be referred to as action.userId in the reducer\n\t}\n\n\t\n}\n\nexport const authFail = (error) =>{\n\n\treturn {\n\t\ttype:actionTypes.AUTH_FAIL,\n\t\terror:error\n\t}\n\n\t\n}\n\nexport const logout = () =>{\n\n\n\taxios.post(\"/logout\").then(res=>{\n\t\tconsole.log(res);\n\t}).catch(err=>{\n\t\tconsole.log(err);\n\t})\n\n\tlocalStorage.removeItem(\"token\");\n\tlocalStorage.removeItem(\"expirationDate\");\n\tlocalStorage.removeItem(\"userId\");\n\tlocalStorage.removeItem(\"redirectPath\");\n\tlocalStorage.removeItem(\"refreshtPath\");\n\tconsole.log(\"logout\");\n\treturn{\n\n\t\ttype:actionTypes.AUTH_LOGOUT,\n\n\t}\n\n}\n\nexport const checkAuthTimeout = (expirationTime) =>{\n\n\treturn dispatch => {\n\t\tconsole.log(\"checkAuthTimeout\");\n\t\tsetTimeout(()=>{\n\n\t\t\tdispatch(logout());\n\n\t\t}, expirationTime * 1000);\n\t\t\t//the expiration time that is returned from firebase is 3600 seconds\n\t\t\t//setTimeout expects time in milliseconds.  this turns it into 36000 milliseconds\n\t\t\t//this will dispatch the logout action in 36000 ms, which is one hour\n\t};\n\n};\n\nexport const auth = (token)=>{\n\treturn dispatch=>{\n\t\tconsole.log(\"auth action auth\");\n\t\tconsole.log(token);\n\tlocalStorage.setItem(\"token\", token);\n\n\tdispatch(authStart());\n\tdispatch(authSuccess(token));\n}\n\n}\n\n// export const auth = (email, password, isSignup) =>{\n\n// \t//dispatch is made available by redux-thunk\n// \t//this is the asynchronous code\n// \treturn dispatch =>{\n\t\t\n// \t\t\t//...\n// \t\t\tdispatch(authStart());\n\n// \t\t\tconst authData = {\n\n// \t\t\t\temail:email,\n// \t\t\t\tpassword:password,\n// \t\t\t\treturnSecureToken:true\n// \t\t\t}\n\n// \t\t\t\t//default is the signUp URL\n// \t\t\tlet url = \"https://www.googleapis.com/identitytoolkit/v3/relyingparty/signupNewUser?key=AIzaSyAZJdyt7vrJBbwN_yY4W_nQJCYCTFhqZ4U\";\n\n\n\n\n// \t\t\tif(!isSignup){\n\n// \t\t\t\t//this is the verifyPassword URL\n// \t\t\t\turl=\"https://www.googleapis.com/identitytoolkit/v3/relyingparty/verifyPassword?key=AIzaSyAZJdyt7vrJBbwN_yY4W_nQJCYCTFhqZ4U\";\n// \t\t\t}\n\n\n// \t\t\taxios.post(url, authData)\n// \t\t\t\t.then(response =>{\n// \t\t\t\t\tconsole.log(response);\n\n// \t\t\t\t\t\t//getTime() converts the date to milliseconds. Multiplying expiresIn by 1000 also converts that value to milliseconds.  This allows them to be added together.  This will be a value one hour in the future from the time of login\n// \t\t\t\t\tconst expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000);\n\n// \t\t\t\t\tlocalStorage.setItem(\"token\", response.data.idToken);\n// \t\t\t\t\tlocalStorage.setItem(\"expirationDate\", expirationDate);\n// \t\t\t\t\tlocalStorage.setItem(\"userId\", response.data.localId);\n\n\n\n// \t\t\t\t\tdispatch(authSuccess(response.data.idToken, response.data.localId));\n// \t\t\t\t\tdispatch(checkAuthTimeout(response.data.expiresIn));\n\t\t\t\t\t\n// \t\t\t\t\t//this sets the app to logout after one hour\n// \t\t\t\t})\n// \t\t\t\t.catch(error =>{\n// \t\t\t\t\tconsole.log(error);\n// \t\t\t\t\tdispatch(authFail(error.response.data.error));\n// \t\t\t\t})\n\n\n// \t\t\t\t// authRef.signInWithPopup(provider).then(response=>{\n// \t\t\t\t// \tconsole.log(response);\n// \t\t\t\t// }).catch(err=>{\n// \t\t\t\t// \tconsole.log(err);\n// \t\t\t\t// })\n\n\n// \t\t}\n\n\n// }\n\n\nexport const setAuthRedirectPath = (path) => {\n\n\t\n\treturn {\n\t\ttype:actionTypes.SET_AUTH_REDIRECT_PATH,\n\t\tpath:path\n\t}\n\n}\n\n// export const setRefreshPath = (path) => {\n\n\t\n\t\n\n// \treturn {\n// \t\ttype:actionTypes.SET_AUTH_REFRESH_PATH,\n// \t\tpath:path\n// \t}\n\n// }\n\nexport const AuthCheckState = () =>{\n\n\treturn dispatch => {\n\n\tconst token = localStorage.getItem(\"token\");\n\t\n\n\tif(!token){\n\n\t\tdispatch(logout());\n\n\n\t} else{\n\t\tconst userId = localStorage.getItem(\"userId\");\n\n\t\t//localStorage.getItem(\"expirationDate\") will return a string. passing it as an argument will return a new Date object\n\n\t\tconst expirationDate = new Date(localStorage.getItem(\"expirationDate\"));\n\n\t\tif(expirationDate > new Date()){\n\n\t\t\t//if the expirationDate is greater than the new Date() at the time this code is run,\n\t\t\t//it means we are logged in\n\n\n\t\t\tconsole.log(expirationDate.getTime() - new Date().getTime());\n\t\t\tconsole.log(\"AuthCheckState if(expdate > new Date)\")\n\t\t\tdispatch(authSuccess(token, userId));\n\t\t\tdispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime())/1000));\n\n\t\t} else{\n\n\t\t\t//if the expirationDate is less than the new Date() at the time this code is run\n\t\t\t//it means the app should log out as we are only supposed to be logged in for one hour\n\n\t\t\tdispatch(logout());\n\n\t\t}\n\n\t\t\n\n\t}\n\n}\n\n\n}\n\n"]},"metadata":{},"sourceType":"module"}