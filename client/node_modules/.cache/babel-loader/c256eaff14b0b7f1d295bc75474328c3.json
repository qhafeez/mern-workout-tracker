{"ast":null,"code":"import _toConsumableArray from \"/Users/qhafeez26/mern-workout/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/qhafeez26/mern-workout/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/qhafeez26/mern-workout/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/qhafeez26/mern-workout/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/qhafeez26/mern-workout/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/qhafeez26/mern-workout/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/qhafeez26/mern-workout/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/qhafeez26/mern-workout/client/src/Containers/WorkoutSelector/WorkoutSelector.js\";\nimport React, { Component } from \"react\";\nimport classes from \"./WorkoutSelector.module.css\";\nimport axios from \"../../axios-db\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"../../Components/UI/Spinner/Spinner\";\nimport Input from \"../../Components/UI/Input/Input\";\nimport SelectedExercisesTable from \"../../Components/SelectedExercisesTable/SelectedExercisesTable\";\nimport SelectedExerciseRow from \"../../Components/SelectedExercisesTable/SelectedExerciseRow/SelectedExerciseRow\";\nimport Button from \"../../Components/UI/Button/Button\";\nimport Random from \"random-id\";\nimport { withRouter, Redirect } from \"react-router-dom\";\nimport * as actions from \"../../store/actions/index\";\nimport firebase, { auth, provider } from '../../fire.js';\n\nvar WorkoutSelector =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(WorkoutSelector, _Component);\n\n  function WorkoutSelector() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, WorkoutSelector);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(WorkoutSelector)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      exerForm: {\n        exercise: {\n          label: \"Select Exercise\",\n          elementType: \"select\",\n          elementConfig: {\n            options: [{\n              value: \"Bench Press\",\n              displayValue: \"Bench Press\"\n            }, {\n              value: \"Incline Bench Press\",\n              displayValue: \"Incline Bench Press\"\n            }, {\n              value: \"Squat\",\n              displayValue: \"Squat\"\n            }, {\n              value: \"RDL\",\n              displayValue: \"RDL\"\n            }, {\n              value: \"Hip Thrust\",\n              displayValue: \"Hip Thrust\"\n            }, {\n              value: \"Split Squat\",\n              displayValue: \"Split Squat\"\n            }, {\n              value: \"Lat Pulldown\",\n              displayValue: \"Lat Pulldown\"\n            }, {\n              value: \"Pull Up\",\n              displayValue: \"Pull Up\"\n            }, {\n              value: \"Row\",\n              displayValue: \"Row\"\n            }, {\n              value: \"Overhead Press\",\n              displayValue: \"Overhead Press\"\n            }, {\n              value: \"Bicep Curl\",\n              displayValue: \"Bicep Curl\"\n            }, {\n              value: \"Face Pull\",\n              displayValue: \"Face Pull\"\n            }, {\n              value: \"Tricep Extension\",\n              displayValue: \"Tricep Extension\"\n            }]\n          },\n          value: \"Bench Press\",\n          validation: {},\n          valid: true,\n          touched: false\n        },\n        weight: {\n          label: \"Enter Weight (lbs)\",\n          elementType: \"input\",\n          elementConfig: {\n            type: \"tel\",\n            placeholder: \"Weight\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: true,\n          touched: false\n        },\n        numberOfSets: {\n          label: \"Select Number Of Sets\",\n          elementType: \"select\",\n          elementConfig: {\n            options: [{\n              value: 1,\n              displayValue: 1\n            }, {\n              value: 2,\n              displayValue: 2\n            }, {\n              value: 3,\n              displayValue: 3\n            }, {\n              value: 4,\n              displayValue: 4\n            }, {\n              value: 5,\n              displayValue: 5\n            }]\n          },\n          value: 1,\n          validation: {},\n          valid: true\n        },\n        numberOfReps: {\n          label: \"Select Number Of Reps\",\n          elementType: \"select\",\n          elementConfig: {\n            options: [{\n              value: 1,\n              displayValue: 1\n            }, {\n              value: 2,\n              displayValue: 2\n            }, {\n              value: 3,\n              displayValue: 3\n            }, {\n              value: 4,\n              displayValue: 4\n            }, {\n              value: 5,\n              displayValue: 5\n            }, {\n              value: 6,\n              displayValue: 6\n            }, {\n              value: 7,\n              displayValue: 7\n            }, {\n              value: 8,\n              displayValue: 8\n            }, {\n              value: 9,\n              displayValue: 9\n            }, {\n              value: 10,\n              displayValue: 10\n            }, {\n              value: 11,\n              displayValue: 11\n            }, {\n              value: 12,\n              displayValue: 12\n            }, {\n              value: 13,\n              displayValue: 13\n            }, {\n              value: 14,\n              displayValue: 14\n            }, {\n              value: 15,\n              displayValue: 15\n            }, {\n              value: 16,\n              displayValue: 16\n            }, {\n              value: 17,\n              displayValue: 17\n            }, {\n              value: 18,\n              displayValue: 18\n            }, {\n              value: 19,\n              displayValue: 19\n            }, {\n              value: 20,\n              displayValue: 20\n            }]\n          },\n          value: 1,\n          validation: {},\n          valid: true\n        }\n      },\n      formIsValid: false,\n      workout: []\n    };\n\n    _this.inputChangeHandler = function (event, inputIdentifier) {\n      console.log(inputIdentifier);\n\n      var updatedExerForm = _objectSpread({}, _this.state.exerForm);\n\n      var updatedFormElement = _objectSpread({}, updatedExerForm[inputIdentifier]);\n\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = _this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      console.log(updatedFormElement.value);\n      updatedFormElement.touched = true;\n      var formIsValid = true;\n      updatedExerForm[inputIdentifier] = updatedFormElement;\n\n      for (var _inputIdentifier in updatedExerForm) {\n        formIsValid = updatedExerForm[_inputIdentifier].valid && formIsValid;\n        console.log(_inputIdentifier + \" \" + updatedExerForm[_inputIdentifier].valid);\n        console.log(formIsValid);\n      }\n\n      console.log(formIsValid);\n      console.log(updatedFormElement);\n\n      _this.setState({\n        exerForm: updatedExerForm,\n        formIsValid: formIsValid\n      });\n    };\n\n    _this.exerciseAddHandler = function (event) {\n      event.preventDefault();\n      var formData = {}; //adds a unique ID for the exercise\n\n      formData.exerciseID = Random();\n\n      for (var formElementIdentifier in _this.state.exerForm) {\n        formData[formElementIdentifier] = _this.state.exerForm[formElementIdentifier].value;\n      }\n\n      console.log(formData);\n      var sets = {};\n\n      for (var i = 0; i < Number(formData.numberOfSets); i++) {\n        //adds a unique ID to the set withing the exercise\n        var id = Random();\n        sets[id] = {\n          reps: 0\n        };\n      }\n\n      formData.sets = sets;\n      var exObj = {\n        workoutId: _this.props.currentWorkout.workoutId,\n        numSets: _this.state.exerForm.numberOfSets.value,\n        maxReps: _this.state.exerForm.numberOfReps.value,\n        exerciseName: _this.state.exerForm.exercise.value,\n        weight: _this.state.exerForm.weight.value\n      };\n\n      _this.props.addExeciseHandler(_this.props.token, exObj);\n\n      _this.resetValuesAfterAdd();\n    };\n\n    _this.resetValuesAfterAdd = function () {\n      var resetForm = _objectSpread({}, _this.state.exerForm);\n\n      resetForm.exercise.value = \"Bench Press\";\n      resetForm.weight.value = \"\";\n      resetForm.numberOfSets.value = 1;\n      resetForm.numberOfReps.value = 1;\n\n      _this.setState({\n        exerForm: resetForm,\n        //this value is set to false as it will automatically become false when\n        //the weight value is set to \"\"\n        formIsValid: false\n      });\n    };\n\n    _this.deleteExercise = function (event) {\n      var id = event.currentTarget.dataset.id;\n\n      var workoutCopy = _toConsumableArray(_this.state.workout);\n\n      var editedWorkoutCopy = workoutCopy.filter(function (exer) {\n        return exer.exerciseID !== id;\n      });\n\n      _this.setState({\n        workout: editedWorkoutCopy\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(WorkoutSelector, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      console.log(\"cwm\");\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {} // state={\n    // \texerciseList:{\n    // \t\t\tbench:\"Bench Press\",\n    // \t\t\tsquat:\"Squat\",\n    // \t\t\tdeadlift:\"Deadlift\",\n    // \t\t\tpullUp: \"Pull Up\",\n    // \t\t\trow: \"Row\",\n    // \t\t\tohp:\"Overhead Press\",\n    // \t\t\tcurl:\"Bicep Curl\",\n    // \t\t\tfacePull:\"Face Pull\",\n    // \t\t\ttrExtension:\"Tricep Extension\"\n    // \t\t},\n    // \tworkout:{\n    // \t\tworkoutID:null,\n    // \t\texercises:[\n    // \t\t\t{ \tidNumber:\"fhadklfjahsl\",//id generated at submission\n    // \t\t\t\texercise:\"bench\",\n    // \t\t\t\tweight:125,\n    // \t\t\t\tsets:5,\n    // \t\t\t\treps:12\n    // \t\t\t}\n    // \t\t\t]\n    // \t\t}\n\n  }, {\n    key: \"checkValidity\",\n    value: function checkValidity(value, rules) {\n      //value is the value property in the orderForm object\n      //rules is the validation property (which is an object) in each orderForm object\n      var isValid = true;\n      console.log(\"[ value before check \" + value + \" ]\");\n\n      if (rules.required) {\n        console.log(\"first if\");\n        isValid = value.trim() !== \"\" && isValid;\n      }\n\n      console.log(\"[ value after check \" + value + \" ]\");\n      console.log(isValid); // if (rules.minLength){\n      // \tconsole.log(\"second if\");\n      // \tisValid = value.length >= rules.minLength  && isValid ;\n      // }\n      // if( rules.maxLength){\n      // \tconsole.log(\"third if\");\n      // \tisValid = value.length <= rules.maxLength  && isValid ;\n      // }\n      //  if (rules.isEmail) {\n      //           const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      //           isValid = pattern.test(value) && isValid\n      //       }\n      //        if (rules.isNumeric) {\n      //           const pattern = /^\\d+$/;\n      //           isValid = pattern.test(value) && isValid\n      //       }\n\n      return isValid;\n    }\n  }, {\n    key: \"render\",\n    // workoutSubmit = () =>{\n    // \tlet token = this.props.token;\n    // \tlet date = new Date();\n    // \tlet currentDate = {\n    // \t\tmonth:date.getMonth() + 1,\n    // \t\tdate:date.getDate(),\n    // \t\tyear:date.getFullYear(),\n    // \t\ttimestamp:date.getTime()\n    // \t}\n    // \tconst itemsRef = firebase.database().ref(\"currentWorkouts/\"+this.props.path+\"/workout\");\n    // \tconsole.log(itemsRef);                    \n    // \tconst data = {\n    // \t\tuserId: this.props.userId,\n    // \t\tworkout:this.state.workout,\n    // \t\tnotes:\"\",\n    // \t\tdate:currentDate,\n    // \t}\n    // \titemsRef.push(data);\n    // }\n    value: function render() {\n      var _this2 = this;\n\n      // let redirect = null;\n      // if(this.props.workoutInProgress){\n      // \tredirect = <Redirect to=\"/workout\" />\n      // }\n      console.log(\"render\");\n      var workoutStuff = null;\n\n      if (this.props.loading) {\n        workoutStuff = React.createElement(Spinner, {\n          style: {\n            margin: 0,\n            height: \"15px\",\n            width: \"15px\",\n            fontSize: \"5px\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 433\n          },\n          __self: this\n        });\n      }\n\n      if (this.props.successMessage) {\n        workoutStuff = this.props.successMessage;\n      }\n\n      var formElementsArray = [];\n\n      for (var key in this.state.exerForm) {\n        formElementsArray.push({\n          id: key,\n          config: this.state.exerForm[key]\n        });\n      }\n\n      var form = React.createElement(\"form\", {\n        onSubmit: this.exerciseAddHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 456\n        },\n        __self: this\n      }, formElementsArray.map(function (formElement) {\n        return React.createElement(\"div\", {\n          className: classes.individualContainer,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 460\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 461\n          },\n          __self: this\n        }, formElement.config.label), React.createElement(Input, {\n          key: formElement.id,\n          elementType: formElement.config.elementType,\n          elementConfig: formElement.config.elementConfig,\n          value: formElement.config.value,\n          changed: function changed(event) {\n            return _this2.inputChangeHandler(event, formElement.id);\n          },\n          invalid: !formElement.config.valid,\n          shouldValidate: formElement.config.validation,\n          touched: formElement.config.touched,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 462\n          },\n          __self: this\n        }));\n      }), React.createElement(\"div\", {\n        className: classes.addingContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 476\n        },\n        __self: this\n      }, React.createElement(Button, {\n        btnType: \"Success\",\n        disabled: !this.state.formIsValid,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 477\n        },\n        __self: this\n      }, \"Add Exercise\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 478\n        },\n        __self: this\n      }, workoutStuff))); // let addedExercises = this.state.workout.map(item=>{\n      // \t\treturn <SelectedExerciseRow key={item.exerciseID} id={item.exerciseID} exercise={item.exercise} weight={item.weight} sets={item.numberOfSets} reps={item.numberOfReps} deleteHandler={(event)=>{this.deleteExercise(event)}} />\n      // })\n      // const exerList = Object.keys(this.state.exerForm.exercise).map(ex=>{\n      // \treturn <option key={ex} value={ex}>{this.state.exerciseList[ex]}</option>\n      // })\n      //this was used when the workout selector was separate from the workout page\n      // <SelectedExercisesTable>\n      // \t\t\t{addedExercises}\n      // \t\t</SelectedExercisesTable>\n      //<Button btnType=\"Success\" disabled={this.state.workout.length === 0} clicked={this.workoutSubmit}>Start Workout</Button>\t\n      //{redirect}\n\n      return React.createElement(\"div\", {\n        className: classes.selectorContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 514\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 516\n        },\n        __self: this\n      }, \"Choose Exercise\"), form, React.createElement(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 519\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return WorkoutSelector;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    userId: state.auth.userId,\n    token: state.auth.token,\n    currentWorkout: state.workout.currentWorkout,\n    workoutInProgress: state.workout.inProgress,\n    workout: state.workout,\n    loading: state.workout.workoutAddProcessing,\n    successMessage: state.workout.workoutAddMessage\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    addExeciseHandler: function addExeciseHandler(token, exObj) {\n      dispatch(actions.addExercise(token, exObj));\n    }\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(WorkoutSelector));","map":{"version":3,"sources":["/Users/qhafeez26/mern-workout/client/src/Containers/WorkoutSelector/WorkoutSelector.js"],"names":["React","Component","classes","axios","connect","Spinner","Input","SelectedExercisesTable","SelectedExerciseRow","Button","Random","withRouter","Redirect","actions","firebase","auth","provider","WorkoutSelector","state","exerForm","exercise","label","elementType","elementConfig","options","value","displayValue","validation","valid","touched","weight","type","placeholder","required","numberOfSets","numberOfReps","formIsValid","workout","inputChangeHandler","event","inputIdentifier","console","log","updatedExerForm","updatedFormElement","target","checkValidity","setState","exerciseAddHandler","preventDefault","formData","exerciseID","formElementIdentifier","sets","i","Number","id","reps","exObj","workoutId","props","currentWorkout","numSets","maxReps","exerciseName","addExeciseHandler","token","resetValuesAfterAdd","resetForm","deleteExercise","currentTarget","dataset","workoutCopy","editedWorkoutCopy","filter","exer","rules","isValid","trim","workoutStuff","loading","margin","height","width","fontSize","successMessage","formElementsArray","key","push","config","form","map","formElement","individualContainer","addingContainer","selectorContainer","textAlign","display","justifyContent","mapStateToProps","userId","workoutInProgress","inProgress","workoutAddProcessing","workoutAddMessage","mapDispatchToProps","dispatch","addExercise"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport classes from \"./WorkoutSelector.module.css\";\nimport axios from \"../../axios-db\";\nimport {connect} from \"react-redux\";\nimport Spinner from \"../../Components/UI/Spinner/Spinner\";\nimport Input from \"../../Components/UI/Input/Input\";\nimport SelectedExercisesTable from \"../../Components/SelectedExercisesTable/SelectedExercisesTable\";\nimport SelectedExerciseRow from \"../../Components/SelectedExercisesTable/SelectedExerciseRow/SelectedExerciseRow\";\nimport Button from \"../../Components/UI/Button/Button\";\nimport Random from \"random-id\";\nimport {withRouter, Redirect} from \"react-router-dom\";\nimport * as actions from \"../../store/actions/index\";\n\nimport firebase, { auth, provider } from '../../fire.js';\n\n\nclass WorkoutSelector extends Component {\n\n\t\n\t\n\n\tcomponentWillMount(){\n\t\tconsole.log(\"cwm\");\n\t\t\n\n\n\t\t\n\n\t}\n\n\tcomponentDidMount(){\n\n\t\t\n\t}\n\n\t// state={\n\n\n\n\t// \texerciseList:{\n\t// \t\t\tbench:\"Bench Press\",\n\t// \t\t\tsquat:\"Squat\",\n\t// \t\t\tdeadlift:\"Deadlift\",\n\t// \t\t\tpullUp: \"Pull Up\",\n\t// \t\t\trow: \"Row\",\n\t// \t\t\tohp:\"Overhead Press\",\n\t// \t\t\tcurl:\"Bicep Curl\",\n\t// \t\t\tfacePull:\"Face Pull\",\n\t// \t\t\ttrExtension:\"Tricep Extension\"\n\t// \t\t},\n\n\n\t// \tworkout:{\n\t// \t\tworkoutID:null,\n\t// \t\texercises:[\n\t// \t\t\t{ \tidNumber:\"fhadklfjahsl\",//id generated at submission\n\t// \t\t\t\texercise:\"bench\",\n\t// \t\t\t\tweight:125,\n\t// \t\t\t\tsets:5,\n\t// \t\t\t\treps:12\n\t// \t\t\t}\n\t// \t\t\t]\n\n\t// \t\t}\n\n\t\tstate = {\n\n\t\t\texerForm:{\n\t\t\t\texercise:{\n\t\t\t\t\tlabel:\"Select Exercise\",\n\t\t\t\t\telementType: \"select\",\n\t\t\t\t\telementConfig: {\n\t\t\t\t\t\toptions:[\n\n\t\t\t\t\t\t\t{value:\"Bench Press\", displayValue:\"Bench Press\"},\n\t\t\t\t\t\t\t{value:\"Incline Bench Press\", displayValue:\"Incline Bench Press\"},\n\t\t\t\t\t\t\t{value:\"Squat\", displayValue:\"Squat\"},\n\t\t\t\t\t\t\t{value:\"RDL\", displayValue:\"RDL\"},\n\t\t\t\t\t\t\t{value:\"Hip Thrust\", displayValue:\"Hip Thrust\"},\n\t\t\t\t\t\t\t{value:\"Split Squat\", displayValue:\"Split Squat\"},\n\t\t\t\t\t\t\t{value:\"Lat Pulldown\", displayValue:\"Lat Pulldown\"},\n\t\t\t\t\t\t\t{value:\"Pull Up\", displayValue:\"Pull Up\"},\n\t\t\t\t\t\t\t{value:\"Row\", displayValue:\"Row\"},\n\t\t\t\t\t\t\t{value:\"Overhead Press\", displayValue:\"Overhead Press\"},\n\t\t\t\t\t\t\t{value:\"Bicep Curl\", displayValue:\"Bicep Curl\"},\n\t\t\t\t\t\t\t{value:\"Face Pull\", displayValue:\"Face Pull\"},\n\t\t\t\t\t\t\t{value:\"Tricep Extension\", displayValue:\"Tricep Extension\"}\n\n\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: \"Bench Press\",\n\t\t\t\t\tvalidation:{\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t},\n\t\t\t\t\tvalid:true,\n\t\t\t\t\ttouched:false\n\t\t\t\t\t\n\n\t\t\t\t}, \n\n\n\t\t\t\t\n\t\t\t\tweight: {\n\t\t\t\t\tlabel:\"Enter Weight (lbs)\",\n\t\t\t\t\telementType: \"input\",\n\t\t\t\t\telementConfig: {\n\t\t\t\t\t\ttype:\"tel\",\n\t\t\t\t\t\tplaceholder: \"Weight\"\n\t\t\t\t\t},\n\t\t\t\t\tvalue: \"\",\n\t\t\t\t\tvalidation:{\n\t\t\t\t\t\trequired:true,\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t},\n\t\t\t\t\tvalid:true,\n\t\t\t\t\ttouched:false\n\t\t\t\t\t\n\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\tnumberOfSets: {\n\n\t\t\t\t\tlabel:\"Select Number Of Sets\",\n\t\t\t\t\telementType: \"select\",\n\t\t\t\t\telementConfig: {\n\t\t\t\t\t\toptions: [\n\t\t\t\n\t\t\t\t\t\t\t{value: 1, displayValue: 1},\n\t\t\t\t\t\t\t{value: 2, displayValue: 2},\n\t\t\t\t\t\t\t{value: 3, displayValue: 3},\n\t\t\t\t\t\t\t{value: 4, displayValue: 4},\n\t\t\t\t\t\t\t{value: 5, displayValue: 5},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: 1,\n\t\t\t\t\tvalidation:{},\n\t\t\t\t\tvalid:true\n\n\t\t\t\t},\n\t\t\t\tnumberOfReps: {\n\n\t\t\t\t\tlabel:\"Select Number Of Reps\",\n\t\t\t\t\telementType: \"select\",\n\t\t\t\t\telementConfig: {\n\t\t\t\t\t\toptions: [\n\t\t\t\n\t\t\t\t\t\t\t{value: 1, displayValue: 1},\n\t\t\t\t\t\t\t{value: 2, displayValue: 2},\n\t\t\t\t\t\t\t{value: 3, displayValue: 3},\n\t\t\t\t\t\t\t{value: 4, displayValue: 4},\n\t\t\t\t\t\t\t{value: 5, displayValue: 5},\n\t\t\t\t\t\t\t{value: 6, displayValue: 6},\n\t\t\t\t\t\t\t{value: 7, displayValue: 7},\n\t\t\t\t\t\t\t{value: 8, displayValue: 8},\n\t\t\t\t\t\t\t{value: 9, displayValue: 9},\n\t\t\t\t\t\t\t{value: 10, displayValue: 10},\n\t\t\t\t\t\t\t{value: 11, displayValue: 11},\n\t\t\t\t\t\t\t{value: 12, displayValue: 12},\n\t\t\t\t\t\t\t{value: 13, displayValue: 13},\n\t\t\t\t\t\t\t{value: 14, displayValue: 14},\n\t\t\t\t\t\t\t{value: 15, displayValue: 15},\n\t\t\t\t\t\t\t{value: 16, displayValue: 16},\n\t\t\t\t\t\t\t{value: 17, displayValue: 17},\n\t\t\t\t\t\t\t{value: 18, displayValue: 18},\n\t\t\t\t\t\t\t{value: 19, displayValue: 19},\n\t\t\t\t\t\t\t{value: 20, displayValue: 20}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: 1,\n\t\t\t\t\tvalidation:{},\n\t\t\t\t\tvalid:true\n\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tformIsValid:false,\n\n\t\t\tworkout:[]\n\t\t\t\n\t\t\n\n\t}\n\n\n\ncheckValidity(value, rules){\n\n\t\t\t\t\t//value is the value property in the orderForm object\n\t\t\t\t\t//rules is the validation property (which is an object) in each orderForm object\n\n\t\tlet isValid = true;\n\n\t\tconsole.log(\"[ value before check \"+value+\" ]\");\n\n\t\tif (rules.required){\n\n\t\t\tconsole.log(\"first if\");\n\t\t\tisValid = value.trim() !== \"\" && isValid;\n\t\t\t\n\n\t\t}\n\n\t\tconsole.log(\"[ value after check \"+value+\" ]\");\n\n\t\tconsole.log(isValid);\n\n\t\t// if (rules.minLength){\n\t\t// \tconsole.log(\"second if\");\n\t\t// \tisValid = value.length >= rules.minLength  && isValid ;\n\t\t\t\n\t\t// }\n\n\t\t// if( rules.maxLength){\n\t\t// \tconsole.log(\"third if\");\n\t\t// \tisValid = value.length <= rules.maxLength  && isValid ;\n\t\t\t\n\t\t// }\n\n\t\t//  if (rules.isEmail) {\n  //           const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n  //           isValid = pattern.test(value) && isValid\n  //       }\n\n  //        if (rules.isNumeric) {\n  //           const pattern = /^\\d+$/;\n  //           isValid = pattern.test(value) && isValid\n  //       }\n\n\n\t\treturn isValid;\n\n\t}\n\n\n\tinputChangeHandler = (event, inputIdentifier) => {\n\n\t\t\tconsole.log(inputIdentifier);\n\n\t\t\tconst updatedExerForm= {\n\t\t\t\t...this.state.exerForm\n\t\t\t}\n\n\n\t\t\tconst updatedFormElement = {\n\t\t\t\t...updatedExerForm[inputIdentifier]\n\t\t\t}\n\n\t\t\tupdatedFormElement.value=event.target.value;\n\t\t\tupdatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n\n\t\t\tconsole.log(updatedFormElement.value);\n\t\t\tupdatedFormElement.touched=true;\n\n\t\t\tlet formIsValid = true;\n\t\t\tupdatedExerForm[inputIdentifier] = updatedFormElement;\n\t\t\tfor(let inputIdentifier in updatedExerForm){\n\n\t\t\t\t\n\t\t\t\tformIsValid = updatedExerForm[inputIdentifier].valid && formIsValid;\n\t\t\t\tconsole.log(inputIdentifier + \" \" + updatedExerForm[inputIdentifier].valid );\n\t\t\t\tconsole.log(formIsValid);\n\t\t\t}\n\t\t\tconsole.log(formIsValid);\n\n\t\t\t\n\t\t\tconsole.log(updatedFormElement);\n\t\t\t\n\n\n\t\t\tthis.setState({\n\t\t\t\texerForm: updatedExerForm,\n\t\t\t\tformIsValid:formIsValid\n\n\t\t\t});\n\n\t}\n\n\n\n\t\t\n\t\n\n\n\texerciseAddHandler = (event) =>{\n\t\tevent.preventDefault();\n\n\t\tconst formData = {};\n\n\t\t//adds a unique ID for the exercise\n\t\tformData.exerciseID = Random();\n\n\n\t\t\tfor ( let formElementIdentifier in this.state.exerForm){\n\n\t\t\t\tformData[formElementIdentifier] = this.state.exerForm[formElementIdentifier].value;\n\n\t\t}\n\n\t\tconsole.log(formData);\n\t\t\n\t\tconst sets={};\n\t\t\n\t\tfor(let i=0; i < Number(formData.numberOfSets); i++){\n\n\t\t\t//adds a unique ID to the set withing the exercise\n\t\t\tlet id = Random();\n\t\t\tsets[id]={reps:0}\n\t\t\t\n\n\t\t}\n\n\t\tformData.sets = sets;\n\n\t\tlet exObj = {\n\t\t\tworkoutId:this.props.currentWorkout.workoutId,\n\t\t\tnumSets:this.state.exerForm.numberOfSets.value,\n\t\t\tmaxReps:this.state.exerForm.numberOfReps.value,\n\t\t\texerciseName:this.state.exerForm.exercise.value,\n\t\t\tweight:this.state.exerForm.weight.value\n\t\t}\n\n\t\n\n\t\tthis.props.addExeciseHandler(this.props.token, exObj);\n\t\tthis.resetValuesAfterAdd();\n\n\n\t}\n\n\tresetValuesAfterAdd = () =>{\n\n\t\tconst resetForm = {\n\t\t\t...this.state.exerForm\n\t\t}\n\n\t\tresetForm.exercise.value=\"Bench Press\";\n\t\tresetForm.weight.value=\"\";\n\t\tresetForm.numberOfSets.value=1;\n\t\tresetForm.numberOfReps.value=1;\n\n\t\tthis.setState({\n\n\t\t\texerForm: resetForm,\n\t\t\t//this value is set to false as it will automatically become false when\n\t\t\t//the weight value is set to \"\"\n\t\t\tformIsValid: false\n\n\t\t})\n\n\n\n\t}\n\n\tdeleteExercise = (event) =>{\n\t\tconst id = event.currentTarget.dataset.id;\n\n\t\tconst workoutCopy = [...this.state.workout];\n\t\tconst editedWorkoutCopy = workoutCopy.filter(exer=>{\n\n\t\t\treturn exer.exerciseID !== id;\n\n\t\t})\n\n\t\tthis.setState({\n\n\t\t\tworkout:editedWorkoutCopy\n\n\t\t})\n\n\n\n\t}\n\n\t// workoutSubmit = () =>{\n\t// \tlet token = this.props.token;\n\t// \tlet date = new Date();\n\t// \tlet currentDate = {\n\t// \t\tmonth:date.getMonth() + 1,\n\t// \t\tdate:date.getDate(),\n\t// \t\tyear:date.getFullYear(),\n\t// \t\ttimestamp:date.getTime()\n\t// \t}\n\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t// \tconst itemsRef = firebase.database().ref(\"currentWorkouts/\"+this.props.path+\"/workout\");\n\t\t\n\t// \tconsole.log(itemsRef);                    \n\n\t// \tconst data = {\n\t// \t\tuserId: this.props.userId,\n\t// \t\tworkout:this.state.workout,\n\t// \t\tnotes:\"\",\n\t// \t\tdate:currentDate,\n\t\t\t\n\t\t\t\n\n\n\t// \t}\n\n\n\t// \titemsRef.push(data);\n\n\n\t\t\n\n\t// }\n\n\n\n\n\n\n\trender(){\n\n\t\t// let redirect = null;\n\n\t\t// if(this.props.workoutInProgress){\n\t\t// \tredirect = <Redirect to=\"/workout\" />\n\t\t// }\n\n\t\tconsole.log(\"render\");\n\n\t\tlet workoutStuff=null;\n\t\tif(this.props.loading){\n\t\t\tworkoutStuff = <Spinner style={{margin:0, height:\"15px\", width:\"15px\", fontSize:\"5px\"}}/>;\n\t\t}\n\n\t\tif(this.props.successMessage){\n\t\t\tworkoutStuff = this.props.successMessage;\n\t\t}\n\n\t\t\tconst formElementsArray =[];\n\n\t\t\tfor(let key in this.state.exerForm){\n\n\n\t\t\t\tformElementsArray.push({\n\n\t\t\t\t\tid: key,\n\t\t\t\t\tconfig: this.state.exerForm[key]\n\n\t\t\t\t})\t\n\t\t\t\t\n\n\t\t\t}\n\n\n\t\t\tlet form = (<form  onSubmit={this.exerciseAddHandler}>\n\t\t\t\t\t{\n\t\t\t\t\t\tformElementsArray.map(formElement =>{\n\n\t\t\t\t\t\t\treturn (<div className={classes.individualContainer}>\n\t\t\t\t\t\t\t\t\t\t<div>{formElement.config.label}</div>\n\t\t\t\t\t\t\t\t\t\t<Input key={formElement.id} \n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t  elementType={formElement.config.elementType} \n\t\t\t\t\t\t\t\t\t\t  elementConfig={formElement.config.elementConfig} \n\t\t\t\t\t\t\t\t\t\t  value={formElement.config.value} \n\t\t\t\t\t\t\t\t\t      changed={(event)=>this.inputChangeHandler(event, formElement.id)} \n\t\t\t\t\t\t\t\t\t\t  invalid={!formElement.config.valid}\n\t\t\t\t\t\t\t\t\t\t  shouldValidate={formElement.config.validation}\n\t\t\t\t\t\t\t\t\t\t  touched={formElement.config.touched}/>\n\t\t\t\t\t\t\t\t</div>)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div className={classes.addingContainer}>\n\t\t\t\t\t\t\t<Button  btnType=\"Success\" disabled={!this.state.formIsValid}>Add Exercise</Button>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t{workoutStuff}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\n\t\t\t\t\t</form>\n\n\t\t\t\t);\n\n\t\t\t// let addedExercises = this.state.workout.map(item=>{\n\n\n\n\t\t\t// \t\treturn <SelectedExerciseRow key={item.exerciseID} id={item.exerciseID} exercise={item.exercise} weight={item.weight} sets={item.numberOfSets} reps={item.numberOfReps} deleteHandler={(event)=>{this.deleteExercise(event)}} />\n\n\t\t\t// })\n\n\n\n\t\t\t// const exerList = Object.keys(this.state.exerForm.exercise).map(ex=>{\n\t\t\t// \treturn <option key={ex} value={ex}>{this.state.exerciseList[ex]}</option>\n\t\t\t// })\n\n\n\t\t\t\t//this was used when the workout selector was separate from the workout page\n\t\t\t\t// <SelectedExercisesTable>\n\t\t\t\t\t\t\t\t\n\t\t\t\t// \t\t\t{addedExercises}\n\n\t\t\t\t\t// \t\t</SelectedExercisesTable>\n\t\t\t\t\t//<Button btnType=\"Success\" disabled={this.state.workout.length === 0} clicked={this.workoutSubmit}>Start Workout</Button>\t\n\t\t\t\t\t//{redirect}\n\n\t\treturn(\n\n\n\t\t\t\t\t<div className={classes.selectorContainer}>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div style={{textAlign:\"center\"}}>Choose Exercise</div>\n\n\t\t\t\t\t\t{form}\n\t\t\t\t\t\t<div style={{display:\"flex\", justifyContent:\"center\"}}>\n\t\t\t\t\t\t\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t</div>\n\n\t\t\t)\n\n\t}\n\n}\n\nconst mapStateToProps = state =>{\n\n\treturn{\n\n\t\tuserId:state.auth.userId,\n\t\ttoken:state.auth.token,\n\t\tcurrentWorkout:state.workout.currentWorkout,\n\t\tworkoutInProgress:state.workout.inProgress,\n\t\tworkout:state.workout,\n\t\tloading:state.workout.workoutAddProcessing,\n\t\tsuccessMessage:state.workout.workoutAddMessage\n\n\t}\n\n}\n\nconst mapDispatchToProps = dispatch =>{\n\treturn{\n\t\taddExeciseHandler:(token, exObj)=>{dispatch(actions.addExercise(token, exObj))}\n\t}\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(WorkoutSelector));"]},"metadata":{},"sourceType":"module"}