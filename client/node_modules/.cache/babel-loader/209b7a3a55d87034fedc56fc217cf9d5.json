{"ast":null,"code":"import * as actionTypes from \"./actionTypes\";\n/*this is a new axios instance.  it is not the one\n  from axios-orders.  we are doing this because\n  we don't use the baseURL that is set up in that one\t\n*/\n\nimport axios from \"axios\"; // import firebase, { authRef, provider } from '../../fire.js';\n\nexport var authStart = function authStart() {\n  //this is used to change the state to 'loading'\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport var authSuccess = function authSuccess(token) {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    token: token //this will be referred to as action.idToken in the reducer\n    // userId:userId,\n    //this will be referred to as action.userId in the reducer\n\n  };\n};\nexport var authFail = function authFail(error) {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\nexport var authLogout = function authLogout() {\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport var logout = function logout() {\n  return function (dispatch) {\n    axios.get(\"/logoutExp\").then(function (res) {\n      console.log(res);\n      localStorage.removeItem(\"token\");\n      localStorage.removeItem(\"expirationDate\");\n      localStorage.removeItem(\"userId\");\n      localStorage.removeItem(\"redirectPath\");\n      localStorage.removeItem(\"refreshtPath\");\n      console.log(\"logout\");\n      dispatch(authLogout());\n    }).catch(function (err) {\n      console.log(err);\n    });\n  };\n};\nexport var checkAuthTimeout = function checkAuthTimeout(expirationTime) {\n  return function (dispatch) {\n    console.log(\"checkAuthTimeout\");\n    setTimeout(function () {\n      dispatch(logout());\n    }, expirationTime * 1000); //the expiration time that is returned from firebase is 3600 seconds\n    //setTimeout expects time in milliseconds.  this turns it into 36000 milliseconds\n    //this will dispatch the logout action in 36000 ms, which is one hour\n  };\n};\nexport var auth = function auth(token) {\n  return function (dispatch) {\n    console.log(\"auth action auth\");\n    console.log(token);\n    localStorage.setItem(\"token\", token);\n    dispatch(authStart());\n    dispatch(authSuccess(token));\n  };\n}; // export const auth = (email, password, isSignup) =>{\n// \t//dispatch is made available by redux-thunk\n// \t//this is the asynchronous code\n// \treturn dispatch =>{\n// \t\t\t//...\n// \t\t\tdispatch(authStart());\n// \t\t\tconst authData = {\n// \t\t\t\temail:email,\n// \t\t\t\tpassword:password,\n// \t\t\t\treturnSecureToken:true\n// \t\t\t}\n// \t\t\t\t//default is the signUp URL\n// \t\t\tlet url = \"https://www.googleapis.com/identitytoolkit/v3/relyingparty/signupNewUser?key=AIzaSyAZJdyt7vrJBbwN_yY4W_nQJCYCTFhqZ4U\";\n// \t\t\tif(!isSignup){\n// \t\t\t\t//this is the verifyPassword URL\n// \t\t\t\turl=\"https://www.googleapis.com/identitytoolkit/v3/relyingparty/verifyPassword?key=AIzaSyAZJdyt7vrJBbwN_yY4W_nQJCYCTFhqZ4U\";\n// \t\t\t}\n// \t\t\taxios.post(url, authData)\n// \t\t\t\t.then(response =>{\n// \t\t\t\t\tconsole.log(response);\n// \t\t\t\t\t\t//getTime() converts the date to milliseconds. Multiplying expiresIn by 1000 also converts that value to milliseconds.  This allows them to be added together.  This will be a value one hour in the future from the time of login\n// \t\t\t\t\tconst expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000);\n// \t\t\t\t\tlocalStorage.setItem(\"token\", response.data.idToken);\n// \t\t\t\t\tlocalStorage.setItem(\"expirationDate\", expirationDate);\n// \t\t\t\t\tlocalStorage.setItem(\"userId\", response.data.localId);\n// \t\t\t\t\tdispatch(authSuccess(response.data.idToken, response.data.localId));\n// \t\t\t\t\tdispatch(checkAuthTimeout(response.data.expiresIn));\n// \t\t\t\t\t//this sets the app to logout after one hour\n// \t\t\t\t})\n// \t\t\t\t.catch(error =>{\n// \t\t\t\t\tconsole.log(error);\n// \t\t\t\t\tdispatch(authFail(error.response.data.error));\n// \t\t\t\t})\n// \t\t\t\t// authRef.signInWithPopup(provider).then(response=>{\n// \t\t\t\t// \tconsole.log(response);\n// \t\t\t\t// }).catch(err=>{\n// \t\t\t\t// \tconsole.log(err);\n// \t\t\t\t// })\n// \t\t}\n// }\n\nexport var setAuthRedirectPath = function setAuthRedirectPath(path) {\n  return {\n    type: actionTypes.SET_AUTH_REDIRECT_PATH,\n    path: path\n  };\n}; // export const setRefreshPath = (path) => {\n// \treturn {\n// \t\ttype:actionTypes.SET_AUTH_REFRESH_PATH,\n// \t\tpath:path\n// \t}\n// }\n\nexport var AuthCheckState = function AuthCheckState() {\n  return function (dispatch) {\n    // const token = localStorage.getItem(\"token\");\n    if (!document.cookie.session) {\n      dispatch(authLogout());\n    } // } else{\n    // \tconst userId = localStorage.getItem(\"userId\");\n    // \t//localStorage.getItem(\"expirationDate\") will return a string. passing it as an argument will return a new Date object\n    // \tconst expirationDate = new Date(localStorage.getItem(\"expirationDate\"));\n    // \tif(expirationDate > new Date()){\n    // \t\t//if the expirationDate is greater than the new Date() at the time this code is run,\n    // \t\t//it means we are logged in\n    // \t\tconsole.log(expirationDate.getTime() - new Date().getTime());\n    // \t\tconsole.log(\"AuthCheckState if(expdate > new Date)\")\n    // \t\tdispatch(authSuccess(token, userId));\n    // \t\tdispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime())/1000));\n    // \t} else{\n    // \t\t//if the expirationDate is less than the new Date() at the time this code is run\n    // \t\t//it means the app should log out as we are only supposed to be logged in for one hour\n    // \t\tdispatch(logout());\n    // \t}\n    // }\n\n  };\n};","map":{"version":3,"sources":["/Users/qhafeez26/mern-workout/client/src/store/actions/auth-actions.js"],"names":["actionTypes","axios","authStart","type","AUTH_START","authSuccess","token","AUTH_SUCCESS","authFail","error","AUTH_FAIL","authLogout","AUTH_LOGOUT","logout","dispatch","get","then","res","console","log","localStorage","removeItem","catch","err","checkAuthTimeout","expirationTime","setTimeout","auth","setItem","setAuthRedirectPath","path","SET_AUTH_REDIRECT_PATH","AuthCheckState","document","cookie","session"],"mappings":"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","sourcesContent":["import * as actionTypes from \"./actionTypes\";\n\n/*this is a new axios instance.  it is not the one\n  from axios-orders.  we are doing this because\n  we don't use the baseURL that is set up in that one\t\n*/\nimport axios from \"axios\";\n// import firebase, { authRef, provider } from '../../fire.js';\n\n\n\n\nexport const authStart = () =>{\n\t//this is used to change the state to 'loading'\n\treturn {\n\t\ttype:actionTypes.AUTH_START\n\t}\n\n\n}\n\nexport const authSuccess = (token) =>{\n\t\n\n\n\n\treturn {\n\t\ttype:actionTypes.AUTH_SUCCESS,\n\t\ttoken:token,  //this will be referred to as action.idToken in the reducer\n\t\t// userId:userId,\n\t\t\t//this will be referred to as action.userId in the reducer\n\t}\n\n\t\n}\n\nexport const authFail = (error) =>{\n\n\treturn {\n\t\ttype:actionTypes.AUTH_FAIL,\n\t\terror:error\n\t}\n\n\t\n}\n\nexport const authLogout = ()=>{\n\n\treturn{\n\n\t\t\t\ttype:actionTypes.AUTH_LOGOUT\n\n\t\t\t}\n\n}\n\nexport const logout = () =>{\n\n\treturn dispatch=>{\n\t\taxios.get(\"/logoutExp\").then(res=>{\n\t\t\tconsole.log(res);\n\t\t\tlocalStorage.removeItem(\"token\");\n\t\tlocalStorage.removeItem(\"expirationDate\");\n\t\tlocalStorage.removeItem(\"userId\");\n\t\tlocalStorage.removeItem(\"redirectPath\");\n\t\tlocalStorage.removeItem(\"refreshtPath\");\n\t\tconsole.log(\"logout\");\n\t\t\n\t\t\tdispatch(authLogout());\n\n\t\t}).catch(err=>{\n\t\t\tconsole.log(err);\n\t\t})\n\n\t\t}\n\t\n\n}\n\nexport const checkAuthTimeout = (expirationTime) =>{\n\n\treturn dispatch => {\n\t\tconsole.log(\"checkAuthTimeout\");\n\t\tsetTimeout(()=>{\n\n\t\t\tdispatch(logout());\n\n\t\t}, expirationTime * 1000);\n\t\t\t//the expiration time that is returned from firebase is 3600 seconds\n\t\t\t//setTimeout expects time in milliseconds.  this turns it into 36000 milliseconds\n\t\t\t//this will dispatch the logout action in 36000 ms, which is one hour\n\t};\n\n};\n\nexport const auth = (token)=>{\n\treturn dispatch=>{\n\t\tconsole.log(\"auth action auth\");\n\t\tconsole.log(token);\n\tlocalStorage.setItem(\"token\", token);\n\n\tdispatch(authStart());\n\tdispatch(authSuccess(token));\n}\n\n}\n\n// export const auth = (email, password, isSignup) =>{\n\n// \t//dispatch is made available by redux-thunk\n// \t//this is the asynchronous code\n// \treturn dispatch =>{\n\t\t\n// \t\t\t//...\n// \t\t\tdispatch(authStart());\n\n// \t\t\tconst authData = {\n\n// \t\t\t\temail:email,\n// \t\t\t\tpassword:password,\n// \t\t\t\treturnSecureToken:true\n// \t\t\t}\n\n// \t\t\t\t//default is the signUp URL\n// \t\t\tlet url = \"https://www.googleapis.com/identitytoolkit/v3/relyingparty/signupNewUser?key=AIzaSyAZJdyt7vrJBbwN_yY4W_nQJCYCTFhqZ4U\";\n\n\n\n\n// \t\t\tif(!isSignup){\n\n// \t\t\t\t//this is the verifyPassword URL\n// \t\t\t\turl=\"https://www.googleapis.com/identitytoolkit/v3/relyingparty/verifyPassword?key=AIzaSyAZJdyt7vrJBbwN_yY4W_nQJCYCTFhqZ4U\";\n// \t\t\t}\n\n\n// \t\t\taxios.post(url, authData)\n// \t\t\t\t.then(response =>{\n// \t\t\t\t\tconsole.log(response);\n\n// \t\t\t\t\t\t//getTime() converts the date to milliseconds. Multiplying expiresIn by 1000 also converts that value to milliseconds.  This allows them to be added together.  This will be a value one hour in the future from the time of login\n// \t\t\t\t\tconst expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000);\n\n// \t\t\t\t\tlocalStorage.setItem(\"token\", response.data.idToken);\n// \t\t\t\t\tlocalStorage.setItem(\"expirationDate\", expirationDate);\n// \t\t\t\t\tlocalStorage.setItem(\"userId\", response.data.localId);\n\n\n\n// \t\t\t\t\tdispatch(authSuccess(response.data.idToken, response.data.localId));\n// \t\t\t\t\tdispatch(checkAuthTimeout(response.data.expiresIn));\n\t\t\t\t\t\n// \t\t\t\t\t//this sets the app to logout after one hour\n// \t\t\t\t})\n// \t\t\t\t.catch(error =>{\n// \t\t\t\t\tconsole.log(error);\n// \t\t\t\t\tdispatch(authFail(error.response.data.error));\n// \t\t\t\t})\n\n\n// \t\t\t\t// authRef.signInWithPopup(provider).then(response=>{\n// \t\t\t\t// \tconsole.log(response);\n// \t\t\t\t// }).catch(err=>{\n// \t\t\t\t// \tconsole.log(err);\n// \t\t\t\t// })\n\n\n// \t\t}\n\n\n// }\n\n\nexport const setAuthRedirectPath = (path) => {\n\n\t\n\treturn {\n\t\ttype:actionTypes.SET_AUTH_REDIRECT_PATH,\n\t\tpath:path\n\t}\n\n}\n\n// export const setRefreshPath = (path) => {\n\n\t\n\t\n\n// \treturn {\n// \t\ttype:actionTypes.SET_AUTH_REFRESH_PATH,\n// \t\tpath:path\n// \t}\n\n// }\n\nexport const AuthCheckState = () =>{\n\n\treturn dispatch => {\n\n\t// const token = localStorage.getItem(\"token\");\n\t\n\n\t\tif(!document.cookie.session){\n\n\t\t\tdispatch(authLogout());\n\t\t}\n\n\t// } else{\n\t// \tconst userId = localStorage.getItem(\"userId\");\n\n\t// \t//localStorage.getItem(\"expirationDate\") will return a string. passing it as an argument will return a new Date object\n\n\t// \tconst expirationDate = new Date(localStorage.getItem(\"expirationDate\"));\n\n\t// \tif(expirationDate > new Date()){\n\n\t// \t\t//if the expirationDate is greater than the new Date() at the time this code is run,\n\t// \t\t//it means we are logged in\n\n\n\t// \t\tconsole.log(expirationDate.getTime() - new Date().getTime());\n\t// \t\tconsole.log(\"AuthCheckState if(expdate > new Date)\")\n\t// \t\tdispatch(authSuccess(token, userId));\n\t// \t\tdispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime())/1000));\n\n\t// \t} else{\n\n\t// \t\t//if the expirationDate is less than the new Date() at the time this code is run\n\t// \t\t//it means the app should log out as we are only supposed to be logged in for one hour\n\n\t// \t\tdispatch(logout());\n\n\t// \t}\n\n\t\t\n\n\t// }\n\n\t}\n\n\n}\n\n"]},"metadata":{},"sourceType":"module"}